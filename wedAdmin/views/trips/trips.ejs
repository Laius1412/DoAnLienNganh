<style>
  .trips-container {
    max-width: 1400px;
    margin: 32px auto;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 12px #0002;
    padding: 32px 20px;
  }
  .trips-title {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 28px;
    color: #007bff;
    letter-spacing: 1px;
  }
  .main-layout {
    display: flex;
    gap: 24px;
    min-height: 600px;
  }
  .sidebar {
    width: 300px;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 20px;
    height: fit-content;
    position: sticky;
    top: 20px;
  }
  .content-area {
    flex: 1;
    min-width: 0;
  }
  .search-title {
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
  }
  .search-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  .form-group {
    display: flex;
    flex-direction: column;
  }
  .form-group label {
    font-weight: bold;
    margin-bottom: 5px;
    color: #555;
  }
  .form-group input {
    padding: 10px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
    transition: border-color 0.3s;
  }
  .form-group input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
  }
  .search-buttons {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 20px;
  }
  .btn-search {
    padding: 12px 20px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: bold;
    transition: background 0.3s;
  }
  .btn-search:hover {
    background: #0056b3;
  }
  .btn-clear {
    padding: 12px 20px;
    background: #6c757d;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    text-align: center;
    font-weight: bold;
    transition: background 0.3s;
  }
  .btn-clear:hover {
    background: #545b62;
  }
  .trips-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    background: #fff;
    border-radius: 14px;
    overflow: hidden;
    box-shadow: 0 2px 12px #0002;
    font-size: 1.05rem;
  }
  .trips-table th, .trips-table td {
    padding: 16px 12px;
    border-bottom: 1px solid #e3e3e3;
    text-align: left;
    vertical-align: middle;
  }
  .trips-table th {
    background: linear-gradient(90deg, #007bff 0%, #339dff 100%);
    color: #fff;
    font-weight: 700;
    font-size: 1.08rem;
    letter-spacing: 0.5px;
    text-align: center;
  }
  .trips-table td {
    background: #f8fafd;
  }
  .trips-table tr:last-child td {
    border-bottom: none;
  }
  .trips-table tbody tr:hover {
    background: #e3f0ff;
    transition: background 0.2s;
  }
  .trips-table .text-center {
    text-align: center !important;
  }
  .trips-table input[type="checkbox"] {
    width: 20px;
    height: 20px;
    accent-color: #007bff;
    border-radius: 4px;
    border: 1.5px solid #007bff;
  }
  .action-link, .btn-outline-primary, .btn-outline-danger {
    min-width: 36px;
    min-height: 36px;
    font-size: 1.1rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px !important;
  }
  .badge.bg-info {
    font-size: 0.98rem;
    padding: 6px 12px;
    border-radius: 6px;
  }
  .action-link {
    background: #007bff;
    color: #fff !important;
    padding: 6px 16px;
    border-radius: 5px;
    text-decoration: none;
    font-weight: 500;
    transition: background 0.2s;
    margin: 0 2px;
    display: inline-block;
  }
  .action-link:hover {
    background: #0056b3;
  }
  .btn-add {
    padding: 12px 24px;
    background: #007bff;
    color: #fff;
    border: none;
    border-radius: 8px;
    font-weight: bold;
    font-size: 1.1rem;
    margin-bottom: 18px;
    transition: background 0.2s;
    box-shadow: 0 2px 8px #0001;
  }
  .btn-add:hover {
    background: #0056b3;
  }
  @media (max-width: 900px) {
    .main-layout { flex-direction: column; }
    .sidebar { width: 100%; position: static; }
  }
</style>
<div class="trips-container">
  <div class="row align-items-center mb-3 g-2">
    <div class="col-12 col-md-6 mb-2 mb-md-0">
      <h2 class="mb-0">Qu·∫£n l√Ω chuy·∫øn ƒëi</h2>
    </div>
    <div class="col-12 col-md-6">
      <div class="d-flex flex-row justify-content-md-end align-items-center gap-2">
        <input id="searchInput" class="form-control border border-primary flex-grow-1" style="min-width:160px;max-width:260px;" placeholder="üîç T√¨m ki·∫øm m√£ chuy·∫øn ho·∫∑c t√™n chuy·∫øn..." onkeyup="filterTable()" />
        <button class="btn btn-danger d-none flex-shrink-0" style="margin-left:12px;" id="deleteSelectedBtn" onclick="submitDeleteSelected()"><i class="bi bi-trash"></i> X√≥a ƒë√£ ch·ªçn</button>
        <button class="btn btn-primary flex-shrink-0" style="margin-left:12px;" data-bs-toggle="modal" data-bs-target="#addTripModal"><i class="bi bi-plus-lg"></i> Th√™m chuy·∫øn ƒëi</button>
      </div>
    </div>
  </div>
  <form method="POST" id="deleteSelectedForm" action="/trips/delete-multiple">
    <div class="table-responsive">
      <table class="table table-hover align-middle table-bordered border-primary rounded" id="tripTable" style="overflow:hidden;">
        <thead class="table-light">
          <tr>
            <th class="text-center"><input type="checkbox" id="selectAll" /></th>
            <th>M√£ chuy·∫øn</th>
            <th>T√™n chuy·∫øn</th>
            <th>Cung ƒë∆∞·ªùng</th>
            <th>ƒêi·ªÉm xu·∫•t ph√°t</th>
            <th>ƒêi·ªÉm ƒë·∫øn</th>
            <th>ƒêi·ªÉm d·ª´ng</th>
            <th class="text-center">H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          <% if (trips.length === 0) { %>
            <tr><td colspan="8" class="text-center">Ch∆∞a c√≥ chuy·∫øn ƒëi n√†o</td></tr>
          <% } else { %>
            <% trips.forEach((trip, idx) => { %>
              <tr>
                <td class="text-center"><input type="checkbox" name="selectedIds" value="<%= trip.id %>" class="rowCheckbox border border-primary" /></td>
                <td><%= trip.tripCode %></td>
                <td><strong><%= trip.nameTrip %></strong></td>
                <td><%= trip.vRouter %></td>
                <td><%= trip.startLocation %></td>
                <td><%= trip.destination %></td>
                <td>
                  <% if (trip.stops && trip.stops.length > 0) { %>
                    <span class="badge bg-info text-dark mb-1 border border-primary" role="button" data-bs-toggle="collapse" data-bs-target="#stopsCollapse<%= idx %>" aria-expanded="false" aria-controls="stopsCollapse<%= idx %>">
                      <%= trip.stops.length %> th√†nh ph·ªë <i class="bi bi-caret-down-fill"></i>
                    </span>
                    <div class="collapse mt-2" id="stopsCollapse<%= idx %>">
                      <ul class="mb-0 ps-3 small">
                        <% trip.stops.forEach(stop => { %>
                          <li><strong><%= stop.city %></strong>: <%= stop.locations.join(', ') %></li>
                        <% }) %>
                      </ul>
                    </div>
                  <% } else { %>
                    <span class="text-muted">Kh√¥ng c√≥</span>
                  <% } %>
                </td>
                <td class="text-center">
                  <button
                    type="button"
                    class="btn btn-sm btn-outline-primary"
                    data-bs-toggle="modal"
                    data-bs-target="#editTripModal"
                    data-trip='<%= encodeURIComponent(JSON.stringify(trip)) %>'
                    onclick='openEditModal(this.dataset.trip)'
                    title="S·ª≠a chuy·∫øn ƒëi"
                  ><i class="bi bi-pencil-square"></i></button>
                </td>
              </tr>
            <% }) %>
          <% } %>
        </tbody>
        <tbody id="noResultsRow" style="display:none;">
          <tr><td colspan="8" class="text-center">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</td></tr>
        </tbody>
      </table>
    </div>
  </form>
</div>

<!-- Modal th√™m chuy·∫øn ƒëi -->
<div class="modal fade" id="addTripModal" tabindex="-1" aria-labelledby="addTripModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <form class="modal-content border border-primary rounded-3" method="POST" action="/trips/add">
      <div class="modal-header">
        <h5 class="modal-title" id="addTripModalLabel">Th√™m chuy·∫øn ƒëi</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="ƒê√≥ng"></button>
      </div>
      <div class="modal-body">
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">M√£ chuy·∫øn</label>
            <input type="text" name="tripCode" class="form-control" required value="<%= addTripData ? addTripData.tripCode : '' %>">
          </div>
          <div class="col-md-6">
            <label class="form-label">T√™n chuy·∫øn ƒëi</label>
            <input type="text" name="nameTrip" class="form-control" required value="<%= addTripData ? addTripData.nameTrip : '' %>">
          </div>
          <div class="col-md-6">
            <label class="form-label">Cung ƒë∆∞·ªùng</label>
            <input type="text" name="vRouter" class="form-control" required value="<%= addTripData ? addTripData.vRouter : '' %>">
          </div>
          <div class="col-md-6">
            <label class="form-label">ƒêi·ªÉm xu·∫•t ph√°t</label>
            <input type="text" name="startLocation" class="form-control" required value="<%= addTripData ? addTripData.startLocation : '' %>">
          </div>
          <div class="col-md-6">
            <label class="form-label">ƒêi·ªÉm ƒë·∫øn</label>
            <input type="text" name="destination" class="form-control" required value="<%= addTripData ? addTripData.destination : '' %>">
          </div>
        </div>
        <div class="mb-3 mt-3">
          <label class="form-label">ƒêi·ªÉm d·ª´ng (stops)</label>
          <div id="addStopsContainer" class="row g-2"></div>
          <button type="button" class="btn btn-outline-success mt-2" onclick="addStopRow('add')"><i class="bi bi-plus-circle"></i> Th√™m th√†nh ph·ªë d·ª´ng</button>
          <input type="hidden" name="stops" id="addStopsInput" value='<%= addTripData && addTripData.stops ? addTripData.stops : "" %>'>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hu·ª∑</button>
        <button type="submit" class="btn btn-primary"><i class="bi bi-check-circle"></i> Th√™m</button>
      </div>
    </form>
  </div>
</div>

<!-- Modal s·ª≠a chuy·∫øn ƒëi -->
<div class="modal fade" id="editTripModal" tabindex="-1" aria-labelledby="editTripModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <form id="editTripForm" class="modal-content border border-primary rounded-3" method="POST" action="">
      <div class="modal-header">
        <h5 class="modal-title" id="editTripModalLabel">S·ª≠a chuy·∫øn ƒëi</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="ƒê√≥ng"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" name="id" id="editTripId" value="<%= editTripData ? editTripData.id : '' %>">
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">M√£ chuy·∫øn</label>
            <input type="text" name="tripCode" id="editCodeTrip" class="form-control" required value="<%= editTripData ? editTripData.tripCode : '' %>">
          </div>
          <div class="col-md-6">
            <label class="form-label">T√™n chuy·∫øn ƒëi</label>
            <input type="text" name="nameTrip" id="editNameTrip" class="form-control" required value="<%= editTripData ? editTripData.nameTrip : '' %>">
          </div>
          <div class="col-md-6">
            <label class="form-label">Cung ƒë∆∞·ªùng</label>
            <input type="text" name="vRouter" id="editVRouter" class="form-control" required value="<%= editTripData ? editTripData.vRouter : '' %>">
          </div>
          <div class="col-md-6">
            <label class="form-label">ƒêi·ªÉm xu·∫•t ph√°t</label>
            <input type="text" name="startLocation" id="editStartLocation" class="form-control" required value="<%= editTripData ? editTripData.startLocation : '' %>">
          </div>
          <div class="col-md-6">
            <label class="form-label">ƒêi·ªÉm ƒë·∫øn</label>
            <input type="text" name="destination" id="editDestination" class="form-control" required value="<%= editTripData ? editTripData.destination : '' %>">
          </div>
        </div>
        <div class="mb-3 mt-3">
          <label class="form-label">ƒêi·ªÉm d·ª´ng (stops)</label>
          <div id="editStopsContainer" class="row g-2"></div>
          <button type="button" class="btn btn-outline-success mt-2" onclick="addStopRow('edit')"><i class="bi bi-plus-circle"></i> Th√™m th√†nh ph·ªë d·ª´ng</button>
          <input type="hidden" name="stops" id="editStopsInput" value='<%= editTripData && editTripData.stops ? editTripData.stops : "" %>'>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hu·ª∑</button>
        <button type="submit" class="btn btn-primary"><i class="bi bi-check-circle"></i> L∆∞u thay ƒë·ªïi</button>
      </div>
    </form>
  </div>
</div>

<!-- Bootstrap Icons CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<script>
  function filterTable() {
    const input = document.getElementById('searchInput').value.toLowerCase();
    const rows = document.querySelectorAll("#tripTable tbody tr:not(#noResultsRow tr)");
    let visibleCount = 0;
    rows.forEach(row => {
      // T√¨m trong c·ªôt M√£ chuy·∫øn (2) v√† T√™n chuy·∫øn (3)
      const code = row.querySelector('td:nth-child(2)')?.innerText.toLowerCase() || '';
      const name = row.querySelector('td:nth-child(3)')?.innerText.toLowerCase() || '';
      if(code.includes(input) || name.includes(input)) {
        row.style.display = '';
        visibleCount++;
      } else {
        row.style.display = 'none';
      }
    });
    document.getElementById('noResultsRow').style.display = visibleCount === 0 ? '' : 'none';
  }

  const deleteBtn = document.getElementById('deleteSelectedBtn');
  const selectAll = document.getElementById('selectAll');

  function updateDeleteBtn() {
    const checkboxes = document.querySelectorAll('.rowCheckbox');
    const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
    deleteBtn.classList.toggle('d-none', !anyChecked);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const checkboxes = document.querySelectorAll('.rowCheckbox');
    checkboxes.forEach(cb => cb.addEventListener('change', updateDeleteBtn));
    
    selectAll.addEventListener('change', () => {
      checkboxes.forEach(cb => cb.checked = selectAll.checked);
      updateDeleteBtn();
    });

    // ========== X·ª¨ L√ù STOPS (TH√äM/S·ª¨A) =============
function renderStops(containerId, inputId, stopsData) {
  const container = document.getElementById(containerId);
  container.innerHTML = '';
  if (!Array.isArray(stopsData)) stopsData = [];
  stopsData.forEach((stop, stopIdx) => {
    const stopCol = document.createElement('div');
    stopCol.className = 'col-12 col-md-6';
    stopCol.innerHTML = `
      <div class="card shadow-sm mb-2 border border-primary">
        <div class="card-header d-flex align-items-center justify-content-between py-2">
          <input type="text" class="form-control form-control-sm me-2" placeholder="Th√†nh ph·ªë" value="${stop.city || ''}" onchange="updateStops('${containerId}', '${inputId}')">
          <button type="button" class="btn btn-danger btn-sm" title="X√≥a th√†nh ph·ªë" onclick="removeStopRow('${containerId}', '${inputId}', ${stopIdx})"><i class="bi bi-x-lg"></i></button>
        </div>
        <div class="card-body py-2">
          ${(stop.locations || []).map((loc, locIdx) => `
            <div class='d-flex align-items-center mb-1'>
              <input type='text' class='form-control form-control-sm me-2' placeholder='ƒêi·ªÉm d·ª´ng' value='${loc}' onchange="updateStops('${containerId}', '${inputId}')">
              <button type='button' class='btn btn-outline-danger btn-sm' title='X√≥a ƒëi·ªÉm d·ª´ng' onclick="removeLocationRow('${containerId}', '${inputId}', ${stopIdx}, ${locIdx})"><i class='bi bi-dash-circle'></i></button>
            </div>
          `).join('')}
          <button type="button" class="btn btn-outline-primary btn-sm mt-1" onclick="addLocationRow('${containerId}', '${inputId}', ${stopIdx})"><i class="bi bi-plus-circle"></i> Th√™m ƒëi·ªÉm d·ª´ng</button>
        </div>
      </div>
    `;
    container.appendChild(stopCol);
  });
  updateStops(containerId, inputId);
}

function getStopsFromDOM(containerId) {
  const container = document.getElementById(containerId);
  const stops = [];
  Array.from(container.children).forEach(stopCol => {
    const cityInput = stopCol.querySelector('.card-header input[type="text"]');
    const city = cityInput ? cityInput.value : '';
    const locations = [];
    const cardBody = stopCol.querySelector('.card-body');
    if (cardBody) {
      // L·∫•y t·∫•t c·∫£ input ƒëi·ªÉm d·ª´ng, b·ªè input ƒë·∫ßu ti√™n n·∫øu tr√πng value v·ªõi city
      const inputs = Array.from(cardBody.querySelectorAll('input.form-control-sm'));
      inputs.forEach((locInput, idx) => {
        if (!(idx === 0 && locInput.value === city)) {
          locations.push(locInput.value);
        }
      });
    }
    if (city) stops.push({ city, locations: locations.filter(l => l) });
  });
  return stops;
}

function updateStops(containerId, inputId) {
  const stops = getStopsFromDOM(containerId);
  document.getElementById(inputId).value = JSON.stringify(stops);
}

function addStopRow(formType) {
  const containerId = formType === 'add' ? 'addStopsContainer' : 'editStopsContainer';
  const inputId = formType === 'add' ? 'addStopsInput' : 'editStopsInput';
  let stops = getStopsFromDOM(containerId);
  stops.push({ city: '', locations: [] });
  renderStops(containerId, inputId, stops);
}

function removeStopRow(containerId, inputId, idx) {
  let stops = getStopsFromDOM(containerId);
  stops.splice(idx, 1);
  renderStops(containerId, inputId, stops);
}

function addLocationRow(containerId, inputId, stopIdx) {
  let stops = getStopsFromDOM(containerId);
  if (!stops[stopIdx].locations) stops[stopIdx].locations = [];
  stops[stopIdx].locations.push('');
  renderStops(containerId, inputId, stops);
}

function removeLocationRow(containerId, inputId, stopIdx, locIdx) {
  let stops = getStopsFromDOM(containerId);
  stops[stopIdx].locations.splice(locIdx, 1);
  renderStops(containerId, inputId, stops);
}

// Kh·ªüi t·∫°o stops khi m·ªü modal
function initStopsForm(formType, stopsData) {
  const containerId = formType === 'add' ? 'addStopsContainer' : 'editStopsContainer';
  const inputId = formType === 'add' ? 'addStopsInput' : 'editStopsInput';
  renderStops(containerId, inputId, stopsData);
}

// Khi m·ªü modal th√™m
if (document.getElementById('addTripModal')) {
  document.getElementById('addTripModal').addEventListener('show.bs.modal', function () {
    let stops = [];
    try {
      stops = JSON.parse(document.getElementById('addStopsInput').value || '[]');
    } catch (e) { stops = []; }
    initStopsForm('add', stops);
  });
}
// Khi m·ªü modal s·ª≠a
if (document.getElementById('editTripModal')) {
  document.getElementById('editTripModal').addEventListener('show.bs.modal', function () {
    let stops = [];
    try {
      stops = JSON.parse(document.getElementById('editStopsInput').value || '[]');
    } catch (e) { stops = []; }
    initStopsForm('edit', stops);
  });
}

function openEditModal(tripStr) {
  var trip = JSON.parse(decodeURIComponent(tripStr));
  document.getElementById("editTripId").value = trip.id;
  document.getElementById("editCodeTrip").value = trip.tripCode;
  document.getElementById("editNameTrip").value = trip.nameTrip;
  document.getElementById("editVRouter").value = trip.vRouter;
  document.getElementById("editStartLocation").value = trip.startLocation;
  document.getElementById("editDestination").value = trip.destination;
  document.getElementById("editTripForm").action = "/trips/edit/" + trip.id;
  document.getElementById("editStopsInput").value = JSON.stringify(trip.stops || []);
  initStopsForm('edit', trip.stops || []);
}
</script>
<% if (addTripError) { %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      var addTripModal = new bootstrap.Modal(document.getElementById('addTripModal'));
      addTripModal.show();
    });
  </script>
<% } %>
<% if (editTripError) { %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      var editTripModal = new bootstrap.Modal(document.getElementById('editTripModal'));
      editTripModal.show();
      document.getElementById("editTripId").value = "<%= editTripData.id %>";
      document.getElementById("editCodeTrip").value = "<%= editTripData.tripCode %>";
      document.getElementById("editNameTrip").value = "<%= editTripData.nameTrip %>";
      document.getElementById("editVRouter").value = "<%= editTripData.vRouter %>";
      document.getElementById("editStartLocation").value = "<%= editTripData.startLocation %>";
      document.getElementById("editDestination").value = "<%= editTripData.destination %>";
      document.getElementById("editTripForm").action = "/trips/edit/<%= editTripData.id %>";
    });
  </script>
<% } %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
